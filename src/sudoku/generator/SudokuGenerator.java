package sudoku.generator;

import sudoku.core.Field;
import sudoku.core.Sudoku;
import sudoku.core.Value;
import sudoku.solver.Solver;

import java.util.Random;

/**
 * The SudokuGenerator class provides functionality to generate Sudoku puzzles
 * of varying difficulty levels. It creates fully solved Sudoku boards, applies
 * random removals of fields to match the specified difficulty, and ensures
 * the created puzzles follow the rules of Sudoku.
 */
public class SudokuGenerator {

    private final Random random = new Random();

    /**
     * Generates a Sudoku puzzle based on the specified difficulty level.
     *
     * @param difficulty the difficulty level for the Sudoku puzzle.
     *                   The available difficulty levels are EASY, MEDIUM, and HARD.
     * @return a Sudoku puzzle corresponding to the specified difficulty level.
     *         Each difficulty level controls the number of pre-filled fields in the puzzle.
     * @throws IllegalArgumentException if the provided difficulty level is unknown or unsupported.
     */
    public Sudoku generate(Difficulty difficulty) {
        switch (difficulty) {
            case EASY -> {
                return generate(40); // z. B. 40 feste Felder
            }
            case MEDIUM -> {
                return generate(30);
            }
            case HARD -> {
                return generate(20);
            }
            default -> throw new IllegalArgumentException("Unbekannter Schwierigkeitsgrad: " + difficulty);
        }
    }

    /**
     * Generates a Sudoku puzzle by first creating a fully solved Sudoku grid and then
     * randomly removing fields until the specified number of given fields remains.
     *
     * @param givenCount the number of fields in the Sudoku puzzle that will remain filled.
     *                   This must be a positive integer less than or equal to 81.
     * @return a Sudoku puzzle with the specified number of filled fields. The puzzle
     *         is generated by emptying cells from a fully solved Sudoku grid.
     */
    private Sudoku generate(int givenCount) {
        // Step 1
        Sudoku full = genSolvedSudoku();
        // Step 2
        Sudoku puzzle = full.deepCopy();
        removeFields(puzzle, 81 - givenCount);
        return puzzle;
    }

    /**
     * Generates a fully solved Sudoku puzzle.
     * This method initializes a new Sudoku board and uses a solver to fill
     * the board, ensuring the generated Sudoku is valid and solved.
     *
     * @return a {@code Sudoku} object representing a fully solved 9x9 Sudoku puzzle
     */
    private Sudoku genSolvedSudoku() {
        Sudoku sudoku = new Sudoku();
        Solver solver = new Solver();
        solver.genPuzzle(sudoku); // füllt das Sudoku vollständig
        return sudoku;
    }

    /**
     * Removes the specified number of fields from a Sudoku puzzle by setting their
     * values to empty. Fields are selected randomly, and only non-fixed, non-empty
     * fields are cleared. After removing fields, the remaining non-empty fields
     * are set as fixed.
     *
     * @param sudoku the Sudoku puzzle from which fields will be removed
     * @param countToRemove the number of fields to remove from the puzzle; must be non-negative
     */
    private void removeFields(Sudoku sudoku, int countToRemove) {
        int removed = 0;

        while (removed < countToRemove) {
            int x = random.nextInt(9);
            int y = random.nextInt(9);
            Field field = sudoku.getField(y, x);
            if (!field.isEmpty() && !field.isFixed()) {
                field.setValue(Value.EMPTY, false);
                removed++;
            }
        }
        
        for (int y = 0; y < 9; y++) {
            for (int x = 0; x < 9; x++) {
                Field f = sudoku.getField(y, x);
                if (!f.isEmpty()) {
                    f.setValue(f.getValue(), true);
                }
            }
        }
    }
}